Index: app/src/main/java/com/example/pbk_test/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pbk_test;\n\nimport android.content.Context;\n\nimport androidx.room.Room;\n\nimport org.bouncycastle.crypto.AsymmetricCipherKeyPair;\nimport org.bouncycastle.crypto.CipherParameters;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.ThreadLocalRandom;\n\nimport it.unisa.dia.gas.crypto.jpbc.signature.bls01.params.BLS01KeyParameters;\nimport it.unisa.dia.gas.crypto.jpbc.signature.bls01.params.BLS01Parameters;\nimport it.unisa.dia.gas.jpbc.Element;\nimport it.unisa.dia.gas.jpbc.Pairing;\nimport it.unisa.dia.gas.plaf.jpbc.pairing.PairingFactory;\n\npublic class User {\n\n    public final PKRBLS pkrbls;\n    public AsymmetricCipherKeyPair keyPair;\n    public CipherParameters nym;\n    public Database db;\n\n    protected Element r;\n    protected BLS01Parameters parameters;\n\n    /**\n     * Construct a new user.\n     * A normal user.\n     * Note: Normally, user should be CONSISTENT in a real application, since you don't want to\n     * lose your data after closing the application. However, in our demo, the user (and associated\n     * database) is newed every single time you enter the activity (UI).\n     * This is simply because we are here only to prove its performance, instead of developing a\n     * REAL application.\n     * @param context Current application context\n     * @throws IOException Error when a.properties is not found\n     */\n    public User(Context context) throws IOException {\n        this.pkrbls = new PKRBLS(context);\n        this.parameters = this.pkrbls.setup();\n        db = Room.databaseBuilder(context, Database.class, \"database-main\").build();\n    }\n\n    /**\n     * Generate initialKey pair.\n     * @throws IOException Error when a.properties is not found\n     */\n    public void keyGen() {\n        this.keyPair = pkrbls.keyGen(this.parameters);\n        this.nym = this.keyPair.getPublic();\n        this.r = pkrbls.setEleZr(1, this.parameters);\n    }\n\n    /**\n     * Generate an Assertion and insert to database.\n     * @param attr      Attributes\n     * @param insert    Whether to insert this assertion into db\n     * @return          Assertion\n     */\n    public Assertion generateAssertion(String attr, boolean insert) {\n        String msg = User.generateMsg(attr);\n        Assertion assertion = new Assertion(this.nym, msg, this.pkrbls.sign(msg, this.keyPair.getPrivate(), this.r), this.parameters.getG().powZn(this.r).toBytes());\n        if (insert)\n            db.assertionDao().insert(assertion);\n        return assertion;\n    }\n\n    /**\n     * Verify an assertion using public key contained.\n     * @param assertion Assertion containing signature to be verified\n     * @return          Verification result\n     */\n    public boolean verifyAssertion(Assertion assertion, Context context) throws IOException {\n        return this.pkrbls.verify(assertion.signature, assertion.msg, MainActivity.getCipherFromBytes(assertion.nym, assertion.g, context));\n    }\n\n    /**\n     * Compress all signatures\n     * @return Compressed signatures\n     */\n    public void save() throws IOException {\n        List<Assertion> assertions = this.db.assertionDao().getAll();\n        List<byte[]> signatures = new ArrayList<>();\n        List<Integer> ids = new ArrayList<>();\n        for (Assertion assertion: assertions) {\n            if (assertion.isSaved = false) {\n                signatures.add(assertion.signature);\n                ids.add(assertion.id);\n                this.db.assertionDao().updateIsSaved(true, assertion.id);\n            }\n        }\n        byte[] compressedSig = this.pkrbls.aggregate(signatures, pkrbls.setup());\n        db.compressedAssertionDao().insert(new CompressedAssertion(compressedSig, ids));\n        this.db.assertionDao().delete();\n    }\n\n    /**\n     * Update pseudonym.\n     * WIP\n     */\n    public void updateNym() {\n        this.r = this.r.mul(this.pkrbls.sampleEleZr(this.parameters));\n        this.nym = this.pkrbls.updatePK(this.nym, this.parameters, r);\n    }\n\n    /**\n     * Generate message by adding randomness to attributes\n     * @param attr  Attributes\n     * @return      Message\n     */\n    public static String generateMsg(String attr) {\n        return attr + \"|\" + ThreadLocalRandom.current().nextInt(0, Integer.MAX_VALUE);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pbk_test/User.java	(revision 3c25293e895de915e1aeb6d38b3098d0a58fc7b6)
+++ app/src/main/java/com/example/pbk_test/User.java	(date 1622820461532)
@@ -87,7 +87,7 @@
         List<byte[]> signatures = new ArrayList<>();
         List<Integer> ids = new ArrayList<>();
         for (Assertion assertion: assertions) {
-            if (assertion.isSaved = false) {
+            if (assertion.isSaved == false) {
                 signatures.add(assertion.signature);
                 ids.add(assertion.id);
                 this.db.assertionDao().updateIsSaved(true, assertion.id);
